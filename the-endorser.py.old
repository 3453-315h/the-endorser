import yaml, linkedin, json, os, sys
from bs4 import BeautifulSoup
from graphviz import Digraph


class LinkedIn(linkedin.LinkedIn):
    def get_endorsements(self, profile_url):
        page = self.client.get(profile_url)

        if page.status_code is not 200:
            print(' ! Failed to login to LinkedIn. Please check your credentials in config.yaml')
            sys.exit()

        soup = BeautifulSoup(page.content, 'html.parser')
        name = soup.find('span', 'full-name').getText()

        try:
            recipient_id = soup.find(id='endorsements')['data-viewee-id']
        except:
            print(' ! Public profile with 0 degrees in common... may have limited information')
            recipient_id = soup.find('div', 'masthead').get('id').replace('member-', '')

        print(' - Fetching endorsements for ' + name + ' (' + recipient_id + ')')

        endorsements = soup.findAll('li', 'endorse-item')
        endorsements_list = list()

        for endorsement in endorsements:
            if endorsement.has_attr('data-endorsed-item-name'):
                skill = endorsement['data-endorsed-item-name']
                count = int(endorsement.find('span', 'num-endorsements').getText())

                if count > 0:
                    print('\t - Fetching ' + skill + ' (' + str(count) + ')')
                    endorsers = self.get_endorsement(recipient_id, skill)
                    endorsements_list.append({
                        'skill': skill,
                        'count': count,
                        'endorsers': ", ".join(endorser.get('name') for endorser in endorsers),
                        'endorsers_list': endorsers
                    })

        return { 'name': name, 'endorsements': endorsements_list }

    def get_endorsement(self, recipient_id, endorsement):
        data = {
            'csrfToken': 'ajax:' + self._csrfToken_ajax,
            'recipientId': recipient_id,
            'skillName': endorsement
        }
        endorsers = self.client.post('https://www.linkedin.com/profile/endorser-info-dialog', data=data)
        endorsers_json = json.loads(endorsers.content.decode('utf-8'))

        endorsers_list = list()
        endorsers_list.extend({
            'id': e.get('memberID'),
            'name': e.get('fullName'),
            'profile_url': e.get('profileURL'),
            'picture_url': 'https://media.licdn.com/mpr/mpr/shrink_200_200' + e.get('pictureID', '/null.jpg'),
            'headline': e.get('headline'),
            'location': e.get('locationString')
        } for e in endorsers_json['content']['endorser_info_dialog']['endorsers'])

        return endorsers_list

if __name__ == '__main__':
    config = yaml.safe_load(open('config.yaml'))
    print(' - Logging in to LinkedIn...')
    client = LinkedIn(config['email'], config['password'])

    g = Digraph(format='pdf')
    g.body.extend(['rankdir=LR', 'size=9.0', 'weight=1.0', 'splines=true', 'overlap=scalexy', 'nodesep=0.6'])

    names = list()
    while True:
        url = str(input(" > LinkedIn Profile URL (press enter for no more): "))
        if len(url) == 0:
            break

        endorsements = client.get_endorsements(url)
        name = endorsements['name']
        names.append(name)

        g.attr('node', fillcolor='lightblue2', style='filled')
        g.node(name)
        g.attr('node', fillcolor='white', style='filled')

        for endorsement in endorsements['endorsements']:
            g.edge(name, endorsement['skill'])

            for endorser in endorsement['endorsers_list']:
                g.edge(endorsement['skill'], endorser['name'])

    tmp_title = "LinkedIn - " + ", ".join(names) + " - Endorsements Map"
    title = str(input(" > Chart Title [" + tmp_title + "]: ")) or tmp_title
    g.body.append('labelloc=top')
    g.body.append('label="' + title + '"')

    try:
        path = os.getcwd() + '/' + tmp_title + '.pdf'
        g.render(filename=path, view=True)

        print(' - Map avaialble at: ' + path)
    except:
        print(' ! Exiting and not saving map...')
        pass

